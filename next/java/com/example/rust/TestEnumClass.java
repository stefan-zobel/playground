// Automatically generated by flapigen
package com.example.rust;


public final class TestEnumClass {

    public TestEnumClass() {
        mNativeObj = init();
    }
    private static native long init();

    public final int f1(MyEnum v) {
        int a0 = v.getValue();
        int ret = do_f1(mNativeObj, a0);
        java.lang.ref.Reference.reachabilityFence(v);

        return ret;
    }
    private static native int do_f1(long self, int v);

    public static MyEnum next_enum(MyEnum v) {
        int a0 = v.getValue();
        int ret = do_next_enum(a0);
        MyEnum convRet = MyEnum.fromInt(ret);
        java.lang.ref.Reference.reachabilityFence(v);

        return convRet;
    }
    private static native int do_next_enum(int v);

    public static native void call_cb(EnumObserver cb);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ TestEnumClass(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}