// Automatically generated by flapigen
package com.example.rust;


public final class TestOptional {

    public static native java.util.OptionalDouble f1(Double x);

    public static native java.util.OptionalLong f2(Long x);

    public static java.util.Optional<Foo> f3(boolean need_something) {
        long ret = do_f3(need_something);
        java.util.Optional<Foo> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new Foo(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_f3(boolean need_something);

    public static java.util.OptionalLong f4(Foo foo) {
        long a0 = 0;//TODO: use ptr::null() for corresponding constant
        if (foo != null) {
            a0 = foo.mNativeObj;
            foo.mNativeObj = 0;
        }

        java.util.OptionalLong ret = do_f4(a0);

        JNIReachabilityFence.reachabilityFence1(foo);

        return ret;
    }
    private static native java.util.OptionalLong do_f4(long foo);

    public static java.util.Optional<String> f5(boolean need_something) {
        String ret = do_f5(need_something);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        return convRet;
    }
    private static native String do_f5(boolean need_something);

    public static java.util.Optional<String> f6(Foo foo) {
        long a0 = 0;//TODO: use ptr::null() for corresponding constant
        if (foo != null) {
            a0 = foo.mNativeObj;
        }

        String ret = do_f6(a0);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        JNIReachabilityFence.reachabilityFence1(foo);

        return convRet;
    }
    private static native String do_f6(long foo);

    public static java.util.Optional<String> test_opt_str(String s) {
        String ret = do_test_opt_str(s);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        return convRet;
    }
    private static native String do_test_opt_str(String s);

    public static native java.util.OptionalInt test_opt_i8(Byte o);

    public static native java.util.OptionalInt test_opt_i16(Short o);

    public static native java.util.OptionalInt test_opt_i32(Integer o);

    public static native java.util.OptionalDouble test_opt_f32(Float o);

    public static java.util.Optional<MyEnum> test_enum(MyEnum o) {
        int a0 = (o != null) ? o.getValue() : -1;

        int ret = do_test_enum(a0);
        java.util.Optional<MyEnum> convRet;
        if (ret != -1) {
            convRet = java.util.Optional.of(MyEnum.fromInt(ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        JNIReachabilityFence.reachabilityFence1(o);

        return convRet;
    }
    private static native int do_test_enum(int o);

    private TestOptional() {}
}