// Automatically generated by flapigen
package com.example.rust;


public final class Xyz {

    public Xyz() {
        mNativeObj = init();
    }
    private static native long init();

    public Xyz(double x, double y, double z) {
        mNativeObj = init(x, y, z);
    }
    private static native long init(double x, double y, double z);

    public final double x() {
        double ret = do_x(mNativeObj);

        return ret;
    }
    private static native double do_x(long self);

    public final double y() {
        double ret = do_y(mNativeObj);

        return ret;
    }
    private static native double do_y(long self);

    public final double z() {
        double ret = do_z(mNativeObj);

        return ret;
    }
    private static native double do_z(long self);

    public final Xyz clone() {
        long ret = do_clone(mNativeObj);
        Xyz convRet = new Xyz(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_clone(long self);

    public static Xyz add(Xyz a, Xyz b) {
        long a0 = a.mNativeObj;

        long a1 = b.mNativeObj;

        long ret = do_add(a0, a1);
        Xyz convRet = new Xyz(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence2(a, b);

        return convRet;
    }
    private static native long do_add(long a, long b);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ Xyz(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}